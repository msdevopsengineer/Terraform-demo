trigger:
  branches:
    include:
      - dev
      - uat
      - production
    exclude:
      - main

pool:
  name: Default
  demands:
    - Agent.Name -equals ragav

variables:
  buildVersion: '1.0.$(Build.BuildId)'
  artifactName: 'nodejs-app'
  nexusUrl: 'http://localhost:8081'
  nexusRepo: 'raw-artifacts'
  nexusUsername: 'admin'
  nexusPassword: '$(NEXUS_PASSWORD)'
  acrLoginServer: 'ragav29096.azurecr.io'
  acrUsername: '$(ACR_USERNAME)'
  acrPassword: '$(ACR_PASSWORD)'
  isDev: $[eq(variables['Build.SourceBranch'], 'refs/heads/dev')]
  isUAT: $[eq(variables['Build.SourceBranch'], 'refs/heads/uat')]
  isProd: $[eq(variables['Build.SourceBranch'], 'refs/heads/production')]

stages:

# === 1. Environment Setup ===
- stage: Setup
  displayName: "1. Environment Setup"
  jobs:
    - job: ValidateAgent
      steps:
        - script: |
            echo "Agent: $(Agent.Name)"
            echo "Branch: $(Build.SourceBranch)"
            node -v; npm -v
            curl --version
            powershell -Command "Get-Command Compress-Archive"
          displayName: "Validate Tools"

# === 2. Node.js Build & Archive ===
- stage: BuildPackage
  displayName: "2. Build & Package"
  jobs:
    - job: NodeBuild
      displayName: "Build and Archive"
      steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '18.x'
          displayName: "Install Node.js"

        - script: |
            npm ci
            npm run test
            npm run build
          displayName: "Install, Test, Build"

        - task: CopyFiles@2
          displayName: 'Copy Build Files'
          inputs:
            sourceFolder: '$(Build.SourcesDirectory)'
            contents: |
              .next/**
              public/**
              package.json
              package-lock.json
              next.config.js
            targetFolder: 'next-app\$(artifactName)'

        - powershell: |
            $source = "$(Build.SourcesDirectory)\next-app\$(artifactName)"
            $zipFile = "$(Build.ArtifactStagingDirectory)\$(artifactName)-$(buildVersion).zip"
            Compress-Archive -Path "$source\*" -DestinationPath $zipFile -Force
          displayName: "Archive Build as ZIP"


        - publish: $(Build.ArtifactStagingDirectory)\$(artifactName)-$(buildVersion).zip
          artifact: $(artifactName)
          displayName: "Publish ZIP Artifact"
    
# === 3. SonarQube Scan (Dev Only) ===
- stage: SonarQubeScan
  displayName: "3. SonarQube Analysis"
  condition: and(succeeded(), eq(variables.isDev, true))
  jobs:
    - job: QualityCheck
      displayName: "Run SonarQube Scan"
      steps:
        - task: SonarQubePrepare@7
          inputs:
            SonarQube: 'SonarQube'
            scannerMode: 'CLI'
            configMode: 'manual'
            cliProjectKey: 'TEST_blogify_AZeB0syaOgINBlBDyaRJ'
            cliProjectName: 'NodeJS App'
            cliSources: '.'

        - task: SonarQubeAnalyze@7
          inputs:
            jdkversion: 'JAVA_HOME'
          displayName: "Analyze Code"

        - task: SonarQubePublish@7
          displayName: "Publish Sonar Results"

# === 4. Upload ZIP to Nexus ===
- stage: UploadToNexus
  displayName: "4. Upload ZIP to Nexus"
  dependsOn: BuildPackage
  condition: succeeded()
  jobs:
    - job: PushToNexus
      displayName: "Upload Artifact"
      steps:
        - download: current
          artifact: $(artifactName)

        - powershell: |
            $zipFile = "$(Pipeline.Workspace)\$(artifactName)\$(artifactName)-$(buildVersion).zip"
            $uploadUrl = "$(nexusUrl)/repository/$(nexusRepo)/nodejs-app-$(buildVersion).zip"
            echo "Uploading ZIP to Nexus"
            echo "ZIP Path: $zipFile"
            echo "Upload URL: $uploadUrl"

            if (!(Test-Path $zipFile)) {
              Write-Error "‚ùå ZIP file not found at: $zipFile"
              exit 1
            }

            curl.exe -v --fail -u "$(nexusUsername):$(nexusPassword)" --upload-file $zipFile $uploadUrl
          displayName: "Upload ZIP to Nexus (using curl.exe)"

# === 5. Trivy Vulnerability Scan (Dev Only) ===
- stage: SecurityScan
  displayName: "5. Trivy + Snyk Security Scan"
  condition: and(succeeded(), eq(variables.isDev, true))  # Run only on 'dev' branch
  jobs:
    - job: TrivyAndSnykScan
      displayName: "Scan for Vulnerabilities"
      steps:

        # --- Download ZIP Artifact ---
        - download: current
          artifact: $(artifactName)

        # --- Extract ZIP ---
        - powershell: |
            $zipFile = "$(Pipeline.Workspace)\$(artifactName)\$(artifactName)-$(buildVersion).zip"
            $extractPath = "nodejs-app\unzipped"
            Expand-Archive -Path $zipFile -DestinationPath $extractPath -Force
          displayName: "Extract ZIP Contents"

        # === TRIVY SCAN ===
        - powershell: |
            $templatePath = "$(Build.SourcesDirectory)\template\junit.tpl"
            $outputXml = "$(Build.ArtifactStagingDirectory)\junit-report-high-crit.xml"

            if (!(Test-Path $templatePath)) {
              Write-Error "‚ùå Trivy JUnit template not found: $templatePath"
              exit 1
            }

            & "c:\trivy\trivy.exe" fs "nodejs-app\unzipped" `
              --exit-code 0 `
              --severity HIGH,CRITICAL `
              --format template `
              --template "@$templatePath" `
              -o "$outputXml"
          displayName: "Scan HIGH/CRITICAL Vulnerabilities with Trivy"

        - powershell: |
            Write-Host "üîç Previewing Trivy XML Output:"
            Get-Content "$(Build.ArtifactStagingDirectory)\junit-report-high-crit.xml"
          displayName: "Preview Trivy XML Output (Debug Step)"

        - task: PublishTestResults@2
          inputs:
            testResultsFormat: "JUnit"
            testResultsFiles: "$(Build.ArtifactStagingDirectory)/junit-report-high-crit.xml"
            failTaskOnFailedTests: false
            testRunTitle: "Trivy Scan - High/Critical"
          displayName: "üìä Publish Trivy Scan Results"

        # === SNYK SCAN (Recommended via PowerShell for multi-step reliability) ===
        - powershell: |
            npm install -g snyk snyk-to-html

            Write-Host "Authenticating to Snyk..."
            snyk auth $env:SNYK_TOKEN

            Write-Host "Running Snyk Test..."
            snyk test nodejs-app/unzipped --severity-threshold=high

            Write-Host "Generating Snyk JSON Report..."
            snyk test nodejs-app/unzipped --json | Out-File -Encoding utf8 snyk-report.json

            Write-Host "Converting to HTML Report..."
            snyk-to-html -i snyk-report.json -o "$(Build.ArtifactStagingDirectory)\snyk-report.html"
          env:
            SNYK_TOKEN: $(SNYK_TOKEN)
          displayName: "üîç Snyk Scan + HTML Report"

- stage: DockerBuildAndPush
  displayName: "6. Docker Build & Push to ACR"
  condition: and(succeeded(), or(eq(variables.isDev, true), eq(variables.isUAT, true), eq(variables.isProd, true)))
  jobs:
    - job: BuildAndPush
      displayName: "Build Docker Image and Push to ACR"
      steps:

        # --- Login to ACR ---
        - script: |
            echo "Logging into ACR..."
            echo $(acrPassword) | docker login $(acrLoginServer) --username $(acrUsername) --password-stdin
          displayName: "Login to ACR"

        # --- Docker Build ---
        - script: |
            docker build -t $(acrLoginServer)/nodejs-app:$(buildVersion) "$(Build.SourcesDirectory)"
          displayName: "Build Docker Image"

        # --- Docker Push ---
        - script: |
            docker tag $(acrLoginServer)/nodejs-app:$(buildVersion) $(acrLoginServer)/nodejs-app:latest
            docker push $(acrLoginServer)/nodejs-app:latest
          displayName: "Tag & Push 'latest' Image"
      

    - job: RunContainerAndRestartNginx
      displayName: "Run Docker Container and Restart Nginx if Needed"
      dependsOn: BuildAndPush
      condition: succeeded()
      steps:
        # --- Run Docker Container ---
        - script: |
            echo "Stopping any existing container..."
            docker stop nodejs-app || echo "No running container to stop"

            echo "Removing existing container..."
            docker rm nodejs-app || echo "No container to remove"

            echo "Running new container on port 3000..."
            docker run -d --name nodejs-app -p 3000:3000 $(acrLoginServer)/nodejs-app:$(buildVersion)
          displayName: "Run Docker Container on Port 3000"

        # --- Check and Restart Nginx ---
        - powershell: |
            echo "=== Checking if Nginx is running ==="
            $nginx = Get-Process -Name "nginx" -ErrorAction SilentlyContinue
            if ($nginx) {
              Write-Host "‚úÖ Nginx is already running"
            } else {
              Write-Host "‚ö†Ô∏è Nginx not running. Attempting restart..."
              cd /d D:\Projects\nginx-1.28.0\nginx-1.28.0
              .\nginx.exe
              Start-Sleep -Seconds 5
              $check = Get-Process -Name "nginx" -ErrorAction SilentlyContinue
              if ($check) {
                Write-Host "‚úÖ Nginx started successfully"
              } else {
                Write-Error "‚ùå Failed to start Nginx"
                exit 1
              }
            }
          displayName: "Check or Restart Nginx"

